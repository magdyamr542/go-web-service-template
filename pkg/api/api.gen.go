// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ResourceLevel.
const (
	ADVANCED     ResourceLevel = "ADVANCED"
	BEGINNER     ResourceLevel = "BEGINNER"
	INTERMEDIATE ResourceLevel = "INTERMEDIATE"
)

// Defines values for ResourceType.
const (
	ARTICLE ResourceType = "ARTICLE"
	VIDEO   ResourceType = "VIDEO"
)

// CrudFields defines model for CrudFields.
type CrudFields struct {
	CreatedAt openapi_types.Date `json:"createdAt"`
	Id        uuid.UUID          `json:"id"`
	UpdatedAt openapi_types.Date `json:"updatedAt"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// NewResource defines model for NewResource.
type NewResource struct {
	Description string `json:"description"`

	// Level level of resource
	Level     ResourceLevel `json:"level"`
	Reference string        `json:"reference"`
	Tags      []string      `json:"tags"`

	// Type type of resource
	Type ResourceType `json:"type"`
}

// Resource defines model for Resource.
type Resource struct {
	CreatedAt   openapi_types.Date `json:"createdAt"`
	Description string             `json:"description"`
	Id          uuid.UUID          `json:"id"`

	// Level level of resource
	Level     ResourceLevel `json:"level"`
	Reference string        `json:"reference"`
	Tags      []string      `json:"tags"`

	// Type type of resource
	Type      ResourceType       `json:"type"`
	UpdatedAt openapi_types.Date `json:"updatedAt"`
}

// ResourceLevel level of resource
type ResourceLevel string

// ResourceType type of resource
type ResourceType string

// VersionInfo defines model for VersionInfo.
type VersionInfo struct {
	BuildTime    string `json:"buildTime"`
	CommitBranch string `json:"commitBranch"`
	CommitSHA    string `json:"commitSHA"`
	CommitTime   string `json:"commitTime"`
	Description  string `json:"description"`
	Version      string `json:"version"`
}

// GetResourcesParams defines parameters for GetResources.
type GetResourcesParams struct {
	// Tags tags to filter by
	Tags  []string       `form:"tags" json:"tags"`
	Type  *ResourceType  `form:"type,omitempty" json:"type,omitempty"`
	Level *ResourceLevel `form:"level,omitempty" json:"level,omitempty"`
}

// CreateResourceJSONRequestBody defines body for CreateResource for application/json ContentType.
type CreateResourceJSONRequestBody = NewResource

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error

	// (POST /resources)
	CreateResource(ctx echo.Context) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Required query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, true, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "level" -------------

	err = runtime.BindQueryParameter("form", true, false, "level", ctx.QueryParams(), &params.Level)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter level: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// CreateResource converts echo context to params.
func (w *ServerInterfaceWrapper) CreateResource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateResource(ctx)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/resources", wrapper.GetResources)
	router.POST(baseURL+"/resources", wrapper.CreateResource)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTW/jNhD9K8K0RyVy2i1Q6ObE6lZA6i1cby7bHGhpLHEhkVxylDYI9N+LoSRbthVv",
	"gu5hcxPF4Zs3bz7IJ8h0bbRCRQ7iJ3BZibXwnze2yX+TWOV+Zaw2aEmiX2UWBWE+J15sta0FQQy5IIQQ",
	"6NEgxODISlVAG4LM2ezfi0Jf9HtNI/PLjx/TBYT7/xeyNtp6SCOohBgKSWWzucx0HRVaFxVGfBDaNoTG",
	"5C9m0IZg8UsjLeYQf2I64SiCMdb97qzefMaMmH1irbanEtTonCiQP8+7GwynsJf4zwqdbmyGpx5ydJmV",
	"hqRWE15CqPABK9750eIWYvgh2ucy6hMZDfC33thT26JFleEkJonC+5aEtZu0qKVKu82rXUDCWvHoj/v1",
	"yxit2fZYrHHMY6499BB0T3RK0rGeoqo+bCH+dJ7QqNDb8G0k4bvT/X6k/O0gyYF2HUKgt4EdMhQCqqZm",
	"99fJ+3S5TFYQQrpcJ6s/kkU6XycQwnxxN1/eJIuRz70MByGdOGTzZ/zdpYvkA6Ov1unNbTIJfofWSa1S",
	"tdWnvblpZJWvZT2dwEzXtaRrK1RWnjH46/f5md1n0b9Wkg8d8a9PpsEwPEr/PrgDLmPaRzGeFgT7kr10",
	"h2mZB07UpsJg/mcaUCkoKIXKK3SBI808AxJFgfkub47LTlLF8EPGHRt1J5jYLmS4upxdzlgFbVAJIyGG",
	"n/2v0F8qPnnRHjl+ggLplOQKqbHKBSKopKNxFbm/WSKuBcG2aQ4xvEdajcgaYUWNhNb52XNUlcybdLCV",
	"FaENNo/AQkEMXxq0vFCC89412jhfZBsM+wv6NdOBZ9qkg66x94CvGR7TkMOQeB1mPxXbe47WGa1cl5if",
	"ZjP/1tCKUPkcCWMqmXndo8+uK/EJQV7idEKn49YCKjFg/dHRQTm2IbybvXsVt3OUugfGhP+NyAf/7POX",
	"To9DG6kIrRJV4NA+oA1wD2a0m6jsG//wCcQunol67mxW+7nZs7jW+eM3C3v89pkIftjjXukfayft0J5U",
	"zNU3o3eO28DnTRRCG0I0uhLOjjuu+N6WZx4vhTHTE+9ud3v8r649J8j4Cn6mPwe2srdhq06Bbvg2toIY",
	"SiITR1GlM1GV2lH862w241fLfwEAAP//TVOHhwANAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
