// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/google/uuid"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ResourceLevel.
const (
	ADVANCED     ResourceLevel = "ADVANCED"
	BEGINNER     ResourceLevel = "BEGINNER"
	INTERMEDIATE ResourceLevel = "INTERMEDIATE"
)

// Defines values for ResourceType.
const (
	ARTICLE ResourceType = "ARTICLE"
	VIDEO   ResourceType = "VIDEO"
)

// CrudFields defines model for CrudFields.
type CrudFields struct {
	CreatedAt openapi_types.Date `json:"createdAt"`
	Id        uuid.UUID          `json:"id"`
	UpdatedAt openapi_types.Date `json:"updatedAt"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// NewResource defines model for NewResource.
type NewResource struct {
	Description string `json:"description"`

	// Level level of resource
	Level     ResourceLevel `json:"level"`
	Reference string        `json:"reference"`
	Tags      []string      `json:"tags"`

	// Type type of resource
	Type ResourceType `json:"type"`
}

// Resource defines model for Resource.
type Resource struct {
	CreatedAt   openapi_types.Date `json:"createdAt"`
	Description string             `json:"description"`
	Id          uuid.UUID          `json:"id"`

	// Level level of resource
	Level     ResourceLevel `json:"level"`
	Reference string        `json:"reference"`
	Tags      []string      `json:"tags"`

	// Type type of resource
	Type      ResourceType       `json:"type"`
	UpdatedAt openapi_types.Date `json:"updatedAt"`
}

// ResourceLevel level of resource
type ResourceLevel string

// ResourceType type of resource
type ResourceType string

// VersionInfo defines model for VersionInfo.
type VersionInfo struct {
	BuildTime    string `json:"buildTime"`
	CommitBranch string `json:"commitBranch"`
	CommitSHA    string `json:"commitSHA"`
	CommitTime   string `json:"commitTime"`
	Description  string `json:"description"`
	Version      string `json:"version"`
}

// GetResourcesParams defines parameters for GetResources.
type GetResourcesParams struct {
	// Offset The number of items to skip before starting to collect the result set
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit The numbers of items to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// Tags tags to filter by
	Tags  string         `form:"tags" json:"tags"`
	Type  *ResourceType  `form:"type,omitempty" json:"type,omitempty"`
	Level *ResourceLevel `form:"level,omitempty" json:"level,omitempty"`
}

// CreateResourceJSONRequestBody defines body for CreateResource for application/json ContentType.
type CreateResourceJSONRequestBody = NewResource

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error

	// (POST /resources)
	CreateResource(ctx echo.Context) error

	// (DELETE /resources/{id})
	DeleteResource(ctx echo.Context, id uuid.UUID) error

	// (GET /version)
	GetVersion(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Required query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", true, true, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "level" -------------

	err = runtime.BindQueryParameter("form", true, false, "level", ctx.QueryParams(), &params.Level)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter level: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// CreateResource converts echo context to params.
func (w *ServerInterfaceWrapper) CreateResource(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateResource(ctx)
	return err
}

// DeleteResource converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteResource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id uuid.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteResource(ctx, id)
	return err
}

// GetVersion converts echo context to params.
func (w *ServerInterfaceWrapper) GetVersion(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVersion(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/resources", wrapper.GetResources)
	router.POST(baseURL+"/resources", wrapper.CreateResource)
	router.DELETE(baseURL+"/resources/:id", wrapper.DeleteResource)
	router.GET(baseURL+"/version", wrapper.GetVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXwXLjNgz9FQ7aozZ22uxMRzcndreaSbMd15vLNgdagmRuKZEhobQej/69Q1Ky5Uj2",
	"Jm0O3ZspgsDDwyMI7yBVpVYVVmQh3oFNN1hy//PG1NnPAmXmV9oojYYE+lVqkBNmM3KLXJmSE8SQcUKI",
	"gLYaIQZLRlQFNBGIzJn9/a5Q79q9uhbZxadPyRyiw/d3otTKeJea0wZiKARt6vVFqspJoVQhceIOQtNE",
	"UOvsxQiaCAw+1sJgBvFnByfqZdD39bA/q9ZfMCWHfmGMMkMKSrSWF+h+ng/XGY75vsO/lmhVbVIcRsjQ",
	"pkZoEqoaiRKBxCeUbud7gznE8N3kUMtJW8hJ5/7WG3toORqsUhz1SbzwsQVhaUctSlElYfNynxA3hm/9",
	"cb9+GaKVs31OVj/nPtbWdZd0C3SM0j6fXMqPOcSfzwPqCb2Jvo0i/O94f+gxf9tRcsRd8MBUzkxXoQiw",
	"qksX/nrxIbm7WywhguRutVj+upgns9UCIpjN72d3N4t5L+aBhqOUBgGd+Yl498l88dF5X66Sm9vFqPN7",
	"NFaoKqlyNbyb61rIbCXK8QKmqiwFXRtepZszBr//Mjuze9L71yT5FIB/vTN1htGz8h+SO8LSh/0sx6Eg",
	"XCzRUndclhmzvNQS2ey3hNGGE9vwKpNomSXlcDLiRYHZvm7WyU6QdO67iltnFE44YPuU4fJiejF1LCiN",
	"FdcCYvjRf4r8o+KLNzl4jndQIA1BLpFqU1nGmRSW+iqyfziKnBa4s00yiOED0rIHVnPDSyQ01veeY8+r",
	"DbKqLtdonFd/xRkpZv8Umq0xVwaZJW7IE6FYqqTElBht0EGoJTGL7tESztljjWYLEVS89OTnedgMdz6k",
	"lfNaEsTTfYlERVigcXI4Dc4eoTOejhNRpSjFiaDvXxTVl5IUy4UkNGy9PRHI956+hMnU2I87kPtu3E9o",
	"aYdzr2mb4y679vg6n+170Dy4pKxWlQ2S/GE69VOWqggrr06utRSpV9zkiw2X+xBr/1C8JOjw/WieNxUI",
	"anus0dLRRWwiuJpevQrbOUhhtBqJv+ZZF9/FfB/4OLZxgjIVl8yieULD8OBMKztyp2/8yMf4Pp+Rmxxs",
	"locXo0VxrbLtm6Xdn/pGku/2/PUPY+pA9c1AMZdvBu8ctg7PNyGEJuq1+slOZE04LJFGxoW5/96TB1tv",
	"mSDLkvmIUIJ1Tyhnm34yd+207eH74rZI2mbn//PsG4rIzna6t/wzNdJ+rob0BLDZv6tCbyQ5+9w6hlrb",
	"jjCu9fiLe7+fXv5T7zwny/4IeKJLdmhFa+OsAgNBB7WREMOGSMeTiVQplxtlKf5pOp26qfmfAAAA//90",
	"K2wngA8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
